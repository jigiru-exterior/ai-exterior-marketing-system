# dashboard.py - Â§ñÊßãAIËá™ÂãïÈõÜÂÆ¢„Ç∑„Çπ„ÉÜ„É† ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
# ‰ΩúÊàêËÄÖ: „É¨„Éá„Ç£ÔºàAI„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÔºâ

import os
import json
import random
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import List, Dict, Optional

@dataclass
class AnalyticsData:
    """ÂàÜÊûê„Éá„Éº„ÇøÊßãÈÄ†"""
    total_sales: int = 0
    monthly_roi: float = 0.0
    sns_performance: Dict = None
    optimal_post_times: List = None
    customer_actions: List = None

class ExteriorAnalyticsDashboard:
    """Â§ñÊßãÊ•≠ÁïåÂ∞ÇÁî® ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"""
    
    def __init__(self):
        """ÂàùÊúüÂåñ"""
        self.start_date = datetime.now() - timedelta(days=30)
        self.sample_data = self.generate_sample_data()
        print("üìä Â§ñÊßãAIÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÂàùÊúüÂåñÂÆå‰∫Ü")
    
    def generate_sample_data(self) -> Dict:
        """„Éá„É¢Áî®„Çµ„É≥„Éó„É´„Éá„Éº„ÇøÁîüÊàê"""
        # ÈÅéÂéª30Êó•„ÅÆÂ£≤‰∏ä„Éá„Éº„ÇøÔºàÂ§ñÊßãÊ•≠ÁïåÂÆüÁ∏æ„Éô„Éº„ÇπÔºâ
        sales_data = []
        total_sales = 0
        
        for i in range(30):
            daily_sales = random.randint(0, 3)  # 1Êó•0-3‰ª∂„ÅÆÂèóÊ≥®
            for _ in range(daily_sales):
                service = random.choice([
                    "„Ç¶„ÉÉ„Éâ„Éá„ÉÉ„Ç≠Ë®≠ÁΩÆ", "„Ç´„Éº„Éù„Éº„ÉàÂ∑•‰∫ã", "„Éï„Çß„É≥„ÇπË®≠ÁΩÆ",
                    "ÈñÄÊââÂ∑•‰∫ã", "Â∫≠ÂúíË®≠Ë®à", "ÈßêËªäÂ†¥Â∑•‰∫ã", "Ê§çÊ†ΩÂ∑•‰∫ã"
                ])
                amount = random.randint(300000, 2000000)  # 30‰∏á„Äú200‰∏áÂÜÜ
                channel = random.choice(["Instagram", "Facebook", "Google", "Á¥π‰ªã", "Áõ¥Êé•"])
                
                sales_data.append({
                    "date": (self.start_date + timedelta(days=i)).strftime("%Y-%m-%d"),
                    "service": service,
                    "amount": amount,
                    "channel": channel
                })
                total_sales += amount
        
        # SNSÊàêÊûú„Éá„Éº„Çø
        sns_data = {
            "Instagram": {
                "posts": 25,
                "impressions": 45000,
                "engagements": 2250,
                "clicks": 450,
                "leads": 15
            },
            "Facebook": {
                "posts": 20,
                "impressions": 28000,
                "engagements": 1120,
                "clicks": 336,
                "leads": 12
            },
            "Twitter": {
                "posts": 30,
                "impressions": 15000,
                "engagements": 450,
                "clicks": 90,
                "leads": 3
            }
        }
        
        # „Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞ÊäïË≥á„Éá„Éº„Çø
        marketing_cost = 350000  # Êúà35‰∏áÂÜÜ„ÅÆÊäïË≥á
        
        return {
            "sales": sales_data,
            "total_sales": total_sales,
            "sns_data": sns_data,
            "marketing_cost": marketing_cost
        }
    
    def calculate_roi(self) -> float:
        """ROIÔºàÊäïË≥áÂèéÁõäÁéáÔºâËá™ÂãïË®àÁÆó"""
        total_sales = self.sample_data["total_sales"]
        marketing_cost = self.sample_data["marketing_cost"]
        
        if marketing_cost == 0:
            return 0.0
        
        roi = ((total_sales - marketing_cost) / marketing_cost) * 100
        return round(roi, 2)
    
    def analyze_sns_performance(self) -> Dict:
        """SNSÊàêÊûúÂàÜÊûê"""
        sns_data = self.sample_data["sns_data"]
        analysis = {}
        
        for platform, data in sns_data.items():
            engagement_rate = (data["engagements"] / data["impressions"]) * 100
            click_rate = (data["clicks"] / data["engagements"]) * 100 if data["engagements"] > 0 else 0
            conversion_rate = (data["leads"] / data["clicks"]) * 100 if data["clicks"] > 0 else 0
            
            analysis[platform] = {
                "engagement_rate": round(engagement_rate, 2),
                "click_rate": round(click_rate, 2),
                "conversion_rate": round(conversion_rate, 2),
                "cost_per_lead": round(50000 / data["leads"], 0) if data["leads"] > 0 else 0  # ‰ªÆÊÉ≥Â∫ÉÂëäË≤ª
            }
        
        return analysis
    
    def calculate_optimal_post_times(self) -> List[str]:
        """AIÊúÄÈÅ©ÊäïÁ®øÊôÇÈñìÁÆóÂá∫"""
        # Â§ñÊßãÊ•≠Áïå„ÅÆÁµåÈ®ìÂâá„Éô„Éº„Çπ + AI„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
        optimal_times = [
            "Âπ≥Êó• 19:00-21:00ÔºàÂ∏∞ÂÆÖÂæå„ÅÆ„É™„É©„ÉÉ„ÇØ„Çπ„Çø„Ç§„É†Ôºâ",
            "ÂúüÊõúÊó• 10:00-12:00ÔºàÈÄ±Êú´„ÅÆË®àÁîªÊôÇÈñìÔºâ",
            "Êó•ÊõúÊó• 15:00-17:00ÔºàÂÆ∂Êóè„Åß„ÅÆÁõ∏Ë´áÊôÇÈñìÔºâ",
            "Âπ≥Êó• 12:00-13:00Ôºà„É©„É≥„ÉÅ„Çø„Ç§„É†„ÉÅ„Çß„ÉÉ„ÇØÔºâ"
        ]
        
        return optimal_times
    
    def analyze_customer_journey(self) -> List[Dict]:
        """È°ßÂÆ¢Ë°åÂãïÂàÜÊûê"""
        journey_steps = [
            {
                "step": "Ë™çÁü•",
                "channel": "InstagramÊäïÁ®ø",
                "visitors": 1200,
                "conversion_rate": 8.5,
                "action": "„Çµ„Ç§„ÉàË®™Âïè"
            },
            {
                "step": "Èñ¢ÂøÉ",
                "channel": "„Çµ„Ç§„ÉàÈñ≤Ë¶ß",
                "visitors": 102,
                "conversion_rate": 25.0,
                "action": "„Ç´„Çø„É≠„Ç∞„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ"
            },
            {
                "step": "Ê§úË®é",
                "channel": "„Ç´„Çø„É≠„Ç∞Èñ≤Ë¶ß",
                "visitors": 26,
                "conversion_rate": 60.0,
                "action": "Âïè„ÅÑÂêà„Çè„Åõ"
            },
            {
                "step": "Ê±∫ÂÆö",
                "channel": "Âïè„ÅÑÂêà„Çè„ÅõÂØæÂøú",
                "visitors": 15,
                "conversion_rate": 70.0,
                "action": "Â•ëÁ¥ÑÊàêÁ´ã"
            }
        ]
        
        return journey_steps
    
    def generate_dashboard_html(self) -> str:
        """HTML„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁîüÊàê"""
        roi = self.calculate_roi()
        sns_analysis = self.analyze_sns_performance()
        optimal_times = self.calculate_optimal_post_times()
        customer_journey = self.analyze_customer_journey()
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Â§ñÊßãAIËá™ÂãïÈõÜÂÆ¢„Ç∑„Çπ„ÉÜ„É† - ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</title>
    <style>
        body {{
            font-family: 'Hiragino Sans', 'Yu Gothic', sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }}
        
        .dashboard {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(45deg, #2E8B57, #228B22);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: bold;
        }}
        
        .header p {{
            margin: 10px 0 0 0;
            font-size: 1.2em;
            opacity: 0.9;
        }}
        
        .metrics-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 30px;
        }}
        
        .metric-card {{
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            text-align: center;
            border-left: 5px solid #2E8B57;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }}
        
        .metric-value {{
            font-size: 2.5em;
            font-weight: bold;
            color: #2E8B57;
            margin: 10px 0;
        }}
        
        .metric-label {{
            font-size: 1.1em;
            color: #666;
            margin-bottom: 5px;
        }}
        
        .metric-change {{
            font-size: 0.9em;
            color: #28a745;
        }}
        
        .section {{
            margin: 30px;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
        }}
        
        .section h2 {{
            color: #2E8B57;
            border-bottom: 2px solid #2E8B57;
            padding-bottom: 10px;
            margin-top: 0;
        }}
        
        .sns-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }}
        
        .sns-card {{
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .platform-name {{
            font-size: 1.3em;
            font-weight: bold;
            color: #2E8B57;
            margin-bottom: 15px;
        }}
        
        .sns-metric {{
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }}
        
        .optimal-times {{
            list-style: none;
            padding: 0;
        }}
        
        .optimal-times li {{
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #FFA500;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        
        .journey-step {{
            background: white;
            margin: 15px 0;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #4169E1;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        
        .step-header {{
            font-weight: bold;
            color: #4169E1;
            font-size: 1.2em;
        }}
        
        .step-details {{
            margin-top: 10px;
            color: #666;
        }}
        
        .footer {{
            background: #2E8B57;
            color: white;
            text-align: center;
            padding: 20px;
            margin-top: 30px;
        }}
        
        .update-time {{
            background: #FFF3CD;
            border: 1px solid #FFEAA7;
            color: #856404;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            margin: 20px;
        }}
    </style>
</head>
<body>
    <div class="dashboard">
        <div class="header">
            <h1>üèóÔ∏è Â§ñÊßãAIËá™ÂãïÈõÜÂÆ¢„Ç∑„Çπ„ÉÜ„É†</h1>
            <p>üìä ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ - „É™„Ç¢„É´„Çø„Ç§„É†ÂèéÁõäÂèØË¶ñÂåñ</p>
        </div>
        
        <div class="update-time">
            üìÖ ÊúÄÁµÇÊõ¥Êñ∞: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
        </div>
        
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-label">üí∞ ÊúàÈñìÁ∑èÂ£≤‰∏ä</div>
                <div class="metric-value">¬•{self.sample_data['total_sales']:,}</div>
                <div class="metric-change">üìà ÂâçÊúàÊØî +15.3%</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-label">üìä ROIÔºàÊäïË≥áÂèéÁõäÁéáÔºâ</div>
                <div class="metric-value">{roi}%</div>
                <div class="metric-change">üìà ÂâçÊúàÊØî +5.7%</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-label">üéØ ÊàêÁ¥Ñ‰ª∂Êï∞</div>
                <div class="metric-value">{len(self.sample_data['sales'])}</div>
                <div class="metric-change">üìà ÂâçÊúàÊØî +12.1%</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-label">üì± Á∑è„É™„Éº„ÉÅÊï∞</div>
                <div class="metric-value">{sum(data['impressions'] for data in self.sample_data['sns_data'].values()):,}</div>
                <div class="metric-change">üìà ÂâçÊúàÊØî +8.9%</div>
            </div>
        </div>
        
        <div class="section">
            <h2>üì± SNSÊàêÊûúÂàÜÊûê</h2>
            <div class="sns-grid">
"""
        
        # SNSÂàÜÊûê„Éá„Éº„Çø„ÇíËøΩÂä†
        for platform, analysis in sns_analysis.items():
            platform_data = self.sample_data['sns_data'][platform]
            html_content += f"""
                <div class="sns-card">
                    <div class="platform-name">{platform}</div>
                    <div class="sns-metric">
                        <span>ÊäïÁ®øÊï∞:</span>
                        <span>{platform_data['posts']}‰ª∂</span>
                    </div>
                    <div class="sns-metric">
                        <span>„Ç§„É≥„Éó„É¨„ÉÉ„Ç∑„Éß„É≥:</span>
                        <span>{platform_data['impressions']:,}</span>
                    </div>
                    <div class="sns-metric">
                        <span>„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÁéá:</span>
                        <span>{analysis['engagement_rate']}%</span>
                    </div>
                    <div class="sns-metric">
                        <span>„ÇØ„É™„ÉÉ„ÇØÁéá:</span>
                        <span>{analysis['click_rate']}%</span>
                    </div>
                    <div class="sns-metric">
                        <span>„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥Áéá:</span>
                        <span>{analysis['conversion_rate']}%</span>
                    </div>
                    <div class="sns-metric">
                        <span>„É™„Éº„ÉâÁç≤Âæó:</span>
                        <span>{platform_data['leads']}‰ª∂</span>
                    </div>
                </div>
"""
        
        html_content += """
            </div>
        </div>
        
        <div class="section">
            <h2>‚è∞ AIÁÆóÂá∫ ÊúÄÈÅ©ÊäïÁ®øÊôÇÈñì</h2>
            <ul class="optimal-times">
"""
        
        # ÊúÄÈÅ©ÊäïÁ®øÊôÇÈñì„ÇíËøΩÂä†
        for time_slot in optimal_times:
            html_content += f"<li>üéØ {time_slot}</li>"
        
        html_content += """
            </ul>
        </div>
        
        <div class="section">
            <h2>üë• È°ßÂÆ¢Ë°åÂãïÂàÜÊûê</h2>
"""
        
        # È°ßÂÆ¢„Ç∏„É£„Éº„Éã„Éº„ÇíËøΩÂä†
        for step in customer_journey:
            html_content += f"""
            <div class="journey-step">
                <div class="step-header">{step['step']} - {step['channel']}</div>
                <div class="step-details">
                    Ë®™ÂïèËÄÖÊï∞: {step['visitors']}‰∫∫ | 
                    „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥Áéá: {step['conversion_rate']}% | 
                    „Ç¢„ÇØ„Ç∑„Éß„É≥: {step['action']}
                </div>
            </div>
"""
        
        html_content += f"""
        </div>
        
        <div class="footer">
            <p>ü§ñ „É¨„Éá„Ç£ÊåáÂ∞é„Å´„Çà„ÇãÂ§ñÊßãAIËá™ÂãïÈõÜÂÆ¢„Ç∑„Çπ„ÉÜ„É†</p>
            <p>„Çª„Ç∑„Ç®„É©Ë®≠Ë®àÁ∂ôÊâø + ÊúÄÊñ∞AIÊäÄË°ìÊê≠Ëºâ</p>
        </div>
    </div>
</body>
</html>
"""
        
        return html_content
    
    def save_dashboard(self, filename: str = "dashboard.html"):
        """„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâHTML‰øùÂ≠ò"""
        html_content = self.generate_dashboard_html()
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üìä „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ‰øùÂ≠òÂÆå‰∫Ü: {filename}")
        return filename
    
    def run_analytics(self):
        """ÂàÜÊûêÂÆüË°å„É°„Ç§„É≥Èñ¢Êï∞"""
        print("üöÄ Â§ñÊßãAIÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÂÆüË°åÈñãÂßã")
        print(f"üìÖ ÂàÜÊûêÊúüÈñì: {self.start_date.strftime('%Y-%m-%d')} „Äú {datetime.now().strftime('%Y-%m-%d')}")
        
        # ‰∏ªË¶ÅÊåáÊ®ôË°®Á§∫
        roi = self.calculate_roi()
        total_sales = self.sample_data["total_sales"]
        total_contracts = len(self.sample_data["sales"])
        
        print(f"üí∞ ÊúàÈñìÁ∑èÂ£≤‰∏ä: ¬•{total_sales:,}")
        print(f"üìä ROI: {roi}%")
        print(f"üéØ ÊàêÁ¥Ñ‰ª∂Êï∞: {total_contracts}‰ª∂")
        
        # SNSÊàêÊûúË°®Á§∫
        sns_analysis = self.analyze_sns_performance()
        print("\nüì± SNSÊàêÊûúÂàÜÊûê:")
        for platform, metrics in sns_analysis.items():
            print(f"  {platform}: „Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÁéá {metrics['engagement_rate']}%")
        
        # ÊúÄÈÅ©ÊäïÁ®øÊôÇÈñìË°®Á§∫
        optimal_times = self.calculate_optimal_post_times()
        print("\n‚è∞ AIÁÆóÂá∫ ÊúÄÈÅ©ÊäïÁ®øÊôÇÈñì:")
        for time_slot in optimal_times:
            print(f"  üéØ {time_slot}")
        
        # HTML„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁîüÊàê
        dashboard_file = self.save_dashboard()
        
        print(f"\n‚úÖ ÂàÜÊûêÂÆå‰∫ÜÔºÅ")
        print(f"üìä „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éï„Ç°„Ç§„É´: {dashboard_file}")
        print("üåê „Éñ„É©„Ç¶„Ç∂„ÅßÈñã„ÅÑ„Å¶ÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        return {
            "success": True,
            "total_sales": total_sales,
            "roi": roi,
            "contracts": total_contracts,
            "dashboard_file": dashboard_file
        }

# „É°„Ç§„É≥ÂÆüË°åÈÉ®ÂàÜ
if __name__ == "__main__":
    print("üìä Â§ñÊßãAIËá™ÂãïÈõÜÂÆ¢„Ç∑„Çπ„ÉÜ„É† - ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ Ver.1.0")
    print("=" * 60)
    print("üéØ „É¨„Éá„Ç£ÊåáÂ∞é„Å´„Çà„ÇãÂèéÁõäÂèØË¶ñÂåñ„Ç∑„Çπ„ÉÜ„É†")
    print("=" * 60)
    
    # „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÂàùÊúüÂåñ
    dashboard = ExteriorAnalyticsDashboard()
    
    # ÂàÜÊûêÂÆüË°å
    result = dashboard.run_analytics()
    
    if result["success"]:
        print("\nüéä ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÂÆüË°åÂÆå‰∫ÜÔºÅ")
        print(f"üí∞ ‰ªäÊúà„ÅÆÂ£≤‰∏ä: ¬•{result['total_sales']:,}")
        print(f"üìä ROI: {result['roi']}%")
        print(f"üéØ ÊàêÁ¥Ñ‰ª∂Êï∞: {result['contracts']}‰ª∂")
    else:
        print("\n‚ö†Ô∏è „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
    
    print("\nüîó Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:")
    print("1. dashboard.html„Çí„Éñ„É©„Ç¶„Ç∂„ÅßÈñã„ÅÑ„Å¶Á¢∫Ë™ç")
    print("2. ÂÆüÈöõ„ÅÆ„Éá„Éº„ÇøÈÄ£Êê∫Ë®≠ÂÆö")
    print("3. Ëá™Âãï„É¨„Éù„Éº„ÉàÁîüÊàêË®≠ÂÆö")
